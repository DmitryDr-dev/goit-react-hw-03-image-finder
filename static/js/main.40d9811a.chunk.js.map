{"version":3,"sources":["components/Searchbar/Searchbar.jsx","services/pixabay-api.js","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","App.js","index.js"],"names":["Searchbar","handleInputChange","e","setState","query","currentTarget","value","handleFormSubmit","preventDefault","state","props","clearState","trim","alert","onSubmit","this","className","type","autoComplete","autoFocus","placeholder","onChange","Component","PixabayApi","searchQuery","pageNumber","qtyPerPage","newSearchQuery","a","url","fetch","response","json","imageArr","console","log","message","ImageGalleryItem","smallImageUrl","largeImageUrl","imgDescription","onImageClick","src","alt","onClick","pixabayApi","Status","ImageGallery","imageClickHandler","target","dataset","source","imageAlt","toggleModal","fetchImages","then","fetchedImages","imageArray","hits","status","error","prevState","showModal","prevProps","prevQuery","newQuery","map","id","largeImageURL","webformatURL","tags","App","formSubmitHandler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40d9811a.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Searchbar extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      query: '',\r\n    };\r\n  }\r\n\r\n  // function to track changes on input\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      query: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  // function to submit form\r\n  handleFormSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const {\r\n      state: { query },\r\n      props,\r\n      clearState,\r\n    } = this;\r\n\r\n    if (query.trim() === '') {\r\n      return alert('Please enter the search query!');\r\n    }\r\n\r\n    props.onSubmit(query);\r\n\r\n    clearState();\r\n  };\r\n\r\n  // function to clear state\r\n  clearState = () => {\r\n    this.setState({\r\n      query: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      state: { query },\r\n      handleInputChange,\r\n      handleFormSubmit,\r\n    } = this;\r\n\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={handleFormSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={query}\r\n            onChange={handleInputChange}\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Searchbar;\r\n","export class PixabayApi {\n  #BASE_URL = 'https://pixabay.com/api/?';\n  #API_KEY = '23203162-5bd4fce9443c3feba1bdcfdd5';\n\n  constructor() {\n    this.searchQuery = '';\n    this.pageNumber = 1;\n    this.qtyPerPage = 12;\n  }\n\n  // searchQuery getter\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  // searchQuery setter\n  set query(newSearchQuery) {\n    this.searchQuery = newSearchQuery;\n  }\n\n  async fetchImages() {\n    const url = `${this.#BASE_URL}q=${this.searchQuery}&page=${\n      this.pageNumber\n    }&key=${this.#API_KEY}&image_type=photo&orientation=horizontal&per_page=${\n      this.qtyPerPage\n    }`;\n\n    try {\n      const response = await fetch(url);\n      const imageArr = await response.json();\n      return imageArr;\n    } catch (error) {\n      console.log(\"Something's wrong\", error?.message);\n    }\n  }\n}\n","import PropTypes from 'prop-types';\r\n\r\nfunction ImageGalleryItem({\r\n  smallImageUrl,\r\n  largeImageUrl,\r\n  imgDescription,\r\n  onImageClick,\r\n}) {\r\n  return (\r\n    <img\r\n      src={smallImageUrl}\r\n      alt={imgDescription}\r\n      className=\"ImageGalleryItem-image\"\r\n      onClick={onImageClick}\r\n      data-source={largeImageUrl}\r\n    />\r\n  );\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  smallImageUrl: PropTypes.string.isRequired,\r\n  largeImageUrl: PropTypes.string.isRequired,\r\n  imgDescription: PropTypes.string.isRequired,\r\n  onImageClick: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// component import\r\nimport { PixabayApi } from '../../services';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\n\r\nconst pixabayApi = new PixabayApi();\r\n\r\n// state machine\r\nconst Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\n\r\nclass ImageGallery extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      imageArray: [],\r\n      status: Status.IDLE,\r\n      showModal: false,\r\n      largeImageUrl: '',\r\n      imageAlt: '',\r\n    };\r\n  }\r\n\r\n  // function to change state status & invoke new images fetch on new props / state\r\n  componentDidUpdate(prevProps) {\r\n    const prevQuery = prevProps?.query;\r\n    const newQuery = this.props?.query;\r\n\r\n    if (prevQuery !== newQuery) {\r\n      this.setState({ status: Status.PENDING });\r\n\r\n      try {\r\n        pixabayApi.query = newQuery;\r\n        this.fetchImages();\r\n      } catch (error) {\r\n        this.setState({ status: Status.REJECTED });\r\n        console.log(\"Okay, Houston, we've got a problem here\", error.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  // function to update state by click on image & to open modal\r\n  imageClickHandler = e => {\r\n    const {\r\n      dataset: { source: url },\r\n      alt,\r\n    } = e.target;\r\n\r\n    this.setState({\r\n      largeImageUrl: url,\r\n      imageAlt: alt,\r\n    });\r\n\r\n    this.toggleModal();\r\n  };\r\n\r\n  // function to fetch images\r\n  fetchImages = () => {\r\n    try {\r\n      pixabayApi.fetchImages().then(fetchedImages =>\r\n        this.setState({\r\n          imageArray: fetchedImages.hits,\r\n          status: Status.RESOLVED,\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      this.setState({ status: Status.REJECTED });\r\n      console.log(\"Okay, Houston, we've got a problem here\", error.message);\r\n    }\r\n  };\r\n\r\n  // function to toggle modal\r\n  toggleModal = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        showModal: !prevState.showModal,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      state: { imageArray, status, showModal, imageAlt, largeImageUrl },\r\n      imageClickHandler,\r\n    } = this;\r\n\r\n    switch (status) {\r\n      case 'idle':\r\n        return <div className=\"\">Enter smth</div>;\r\n      case 'pending':\r\n        return <div className=\"\">Wait</div>;\r\n      case 'resolved':\r\n        return (\r\n          <>\r\n            <ul className=\"ImageGallery\">\r\n              {imageArray.map(({ id, largeImageURL, webformatURL, tags }) => {\r\n                return (\r\n                  <li key={id} className=\"ImageGalleryItem\">\r\n                    <ImageGalleryItem\r\n                      largeImageUrl={largeImageURL}\r\n                      smallImageUrl={webformatURL}\r\n                      imgDescription={tags}\r\n                      onImageClick={imageClickHandler}\r\n                    />\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </>\r\n        );\r\n      case 'rejected':\r\n        return <div className=\"\">Ooops</div>;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  query: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ImageGallery;\r\n","import { Component } from 'react';\n\n// component import\nimport Searchbar from './components/Searchbar';\nimport ImageGallery from './components/ImageGallery';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      searchQuery: '',\n    };\n  }\n\n  // function to update App state on Form submit\n  formSubmitHandler = newQuery => {\n    this.setState({ searchQuery: newQuery });\n  };\n\n  render() {\n    const {\n      state: { searchQuery },\n      formSubmitHandler,\n    } = this;\n\n    return (\n      <>\n        <Searchbar onSubmit={formSubmitHandler} />\n        <ImageGallery query={searchQuery} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}